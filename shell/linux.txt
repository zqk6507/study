1.top 整机
load average 1分钟 5分钟 15分钟的负载
（a+b+c）/3 * 100% >60% 则系统负担大

uptime 精简版
2.CPU vmstat

vmstat -n 2 3 //每两秒采样一次，共计三次

pidstat

mpstat 查看所有cpu核信息
mpstat -p ALL 2 //每两秒一次
pidstat -u l -p 进程ID

3.内存 free
free -g 单位是G
free -m 单位是M
pidstat -p 进程号 -r 采样间隔秒数  

4。df 硬盘 剩余空间数
df -h 这种方式看的比较方便

5.iostat pidstat
iostat -xdk 2 3
查看额外 pidstat -d 采样间隔秒数 -p 进程号

6.ifstat 网络IO
默认本地没有ifstat

下载通过以下命令
wget http://gael.roualland.free.fr/ifstat/ifstat-1.1.tar.gz
tar xzvf ifstat-1.1.tar.gz
cd ifstat-1.1
./configure
make
make install

#############################CPU过高###########
7.分析CPU过高

1.先用top命令找出CPU占比最高的
2.ps -ef 或者jps 进一步定位，得知是一个怎么样的后台程序
示例：jps -l
ps -ef |grep java |grep -v grep

3.定位到具体的线程或者代码
示例：由进程变成线程
ps -mp 进程号 | -o THREAD,tid,time

参数讲解：
-m 显示所有的线程
-p pid进程使用CPU的时间
-o 该参数后是用户自定义格式

4.将需要的线程ID转换为16进制格式
printf "%x\n" 有问题的线程ID

5.jstack 进程ID | grep tid(16进制线程ID小写英文) -A60
示例：
// 13ee 就是5101的十六进制小写数
jstack 5101 | grep 13ee -A60








